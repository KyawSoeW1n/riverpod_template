// Mocks generated by Mockito 5.4.4 from annotations
// in riverpod_testing/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_testing/data_model/cache/cache_post.dart' as _i4;
import 'package:riverpod_testing/data_source/network/posts/post_remote_datasource_impl.dart'
    as _i5;
import 'package:riverpod_testing/domain/fetch_posts/fetch_posts_usecase_impl.dart'
    as _i7;
import 'package:riverpod_testing/mapper/posts_mapper.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1<T1> extends _i1.SmartFake implements _i2.Response<T1> {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostMapper extends _i1.Mock implements _i3.PostMapper {
  MockPostMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.CachePost> mapFromResponse(List<dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #mapFromResponse,
          [data],
        ),
        returnValue: <_i4.CachePost>[],
      ) as List<_i4.CachePost>);
}

/// A class which mocks [PostRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRemoteDataSourceImpl extends _i1.Mock
    implements _i5.PostRemoteDataSourceImpl {
  MockPostRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dioClient => (super.noSuchMethod(
        Invocation.getter(#dioClient),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dioClient),
        ),
      ) as _i2.Dio);

  @override
  _i6.Future<List<_i4.CachePost>> getPostList() => (super.noSuchMethod(
        Invocation.method(
          #getPostList,
          [],
        ),
        returnValue: _i6.Future<List<_i4.CachePost>>.value(<_i4.CachePost>[]),
      ) as _i6.Future<List<_i4.CachePost>>);

  @override
  _i6.Future<_i2.Response<T>> callApiWithErrorParser<T>(
          _i6.Future<_i2.Response<T>> Function()? apiProvider) =>
      (super.noSuchMethod(
        Invocation.method(
          #callApiWithErrorParser,
          [apiProvider],
        ),
        returnValue: _i6.Future<_i2.Response<T>>.value(_FakeResponse_1<T>(
          this,
          Invocation.method(
            #callApiWithErrorParser,
            [apiProvider],
          ),
        )),
      ) as _i6.Future<_i2.Response<T>>);
}

/// A class which mocks [FetchPostsUseCaseImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPostsUseCaseImpl extends _i1.Mock
    implements _i7.FetchPostsUseCaseImpl {
  MockFetchPostsUseCaseImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> fetchPostList() => (super.noSuchMethod(
        Invocation.method(
          #fetchPostList,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
